<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-01-07T23:28:12+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Dev.Isaac</title><subtitle>정이삭 공부블로그</subtitle><entry><title type="html">21년 1월 7일</title><link href="http://localhost:4000/til/2021/01/07/TIL4.html" rel="alternate" type="text/html" title="21년 1월 7일" /><published>2021-01-07T00:00:00+09:00</published><updated>2021-01-07T00:00:00+09:00</updated><id>http://localhost:4000/til/2021/01/07/TIL4</id><content type="html" xml:base="http://localhost:4000/til/2021/01/07/TIL4.html">&lt;h2 id=&quot;한-일&quot;&gt;한 일&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Linux SSH 서버 설치 및 config 방법 (Ubuntu)&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;linux에 SSH가 설치되어 있지 않는 경우 SSH를 설치한다&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#SSH 서버 클라이언트 모두 설치&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get ssh
&lt;span class=&quot;c&quot;&gt;#서버만 설치하고 싶으면&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get openssh-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;/etc/ssh/sshd_config 파일을 통해 SSH 설정을 변경할 수 있다.&lt;/p&gt;

        &lt;p&gt;참고: &lt;a href=&quot;http://programmingskills.net/archives/315&quot;&gt;http://programmingskills.net/archives/315&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Virtual Box으로 실행한 ubuntu에 ssh로 접속하기 (MAC 기준)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;VM 내부 ubuntu에서 ifconfig 명령어로 사설 IP를 확인한다.&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/public/img/210107/1.png&quot; alt=&quot;image-20210107133137703&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;기존 OS (host OS) 에서 사설 IP를 확인한다.&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;맥은 터미널에서 ifconfg 또는 시스템환경설정 - 네트워크에서 확인&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;VirtualBox 에서 ubuntu 설정 - 네트워크 - 고급 - 포트포워드 클릭&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/public/img/210107/2.png&quot; alt=&quot;image-20210107134958414&quot; style=&quot;zoom: 33%;&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;호스트 IP에 원래 OS의 IP주소, 호스트 포트에 접속할 때 사용할 호스트 포트를 입력한다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;게스트 IP에 vm내부의 ubuntu IP주소를 입력하고, 게스트 포트에는 22를 입력한다.(SSH의 기본 포트는 22이고, unbuntu내에서 ssh 포트를 수정하였다면 수정한 포트 번호를 입력한다.)&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/public/img/210107/3.png&quot; alt=&quot;image-20210107135348581&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;맥에는 기본적으로 tree명령어가 없기 때문에 tree명령어를 설치해보았다.&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;Homebrew는 Apple에서 제공하지 않는 패키지 관리자를 설치할 수 있다.&lt;/p&gt;

        &lt;p&gt;Homebrew를 설치한다&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/bin/bash &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;homebrew를 통해 tree명령어를 설치한다&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tree
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;코드스쿼드 미션으로 간단한 shell script를 짜보았다.&lt;/p&gt;

    &lt;p&gt;사용한 것은 아래에 적어놓았고 기본적인 쉘스크립트 문법은 구글링해서 익히자.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;해당 폴더가 존재하는지 확인&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if [ ! -d &amp;lt;폴더명&amp;gt; ]; then
  #do
fi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;해당 파일이 존재하는지 확인&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if [ ! -f &amp;lt;파일명&amp;gt; ]; then
  #do
fi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;특정 형식의 파일이 존재하는지 확인&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if [ $(find &amp;lt;폴더&amp;gt; -name &amp;lt;파일형식(*.cs 등)&amp;gt; | wc -l) -eq 0 ]; then
	#do
fi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;특정 형식의 파일만 zip로 압축 (tar도 거의 동일)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find &amp;lt;폴더&amp;gt; -name &amp;lt;파일형식(*.cs 등)&amp;gt; | xargs zip &amp;lt;압축파일명&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;scp로 remote에 파일 복사&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scp -P &amp;lt;포트번호&amp;gt; &amp;lt;복사할 파일명&amp;gt; &amp;lt;remote계정&amp;gt;@&amp;lt;remote IP&amp;gt;:&amp;lt;remote 파일경로(이 경로의 파일명으로 복사됨)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;프로그래머스에서 [다리를 지나는 트럭], [프린터] 2문제를 풀었다.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;두 문제 다 queue를 이용하여 푸는 문제였다. 이미 풀었던 문제를 Java로 풀어보았다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;잘못한-것&quot;&gt;잘못한 것&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Java의 정석과 TCP/IP 더 쉽게 책을 보지 못했다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;잘한-것&quot;&gt;잘한 것&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;VM을 설치하여 ubuntu를 설치하고, SSH를 연결한 후, 호스트에서 특정 파일을 압축하여 게스트OS로 보내는 과정을 쉘 스크립트로 자동화 하였다.
    &lt;ul&gt;
      &lt;li&gt;SSH를 연결하는 과정에서 포트포워딩을 해보았고 이를 통해 NAT이라는 네트워크 개념을 익힌 후 글로 정리하였다.&lt;/li&gt;
      &lt;li&gt;SCP로 파일을 전송하는 과정에서 permission denied를 겪었고 이를 통해, Linux에서 Directory의 소유자, 그룹에 따른 권한이 어떻게 적용되는지 알게 되었다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;느낌&quot;&gt;느낌&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;코드스쿼드에서 준 미션을 단순히 풀기만 함으로써 네트워크 관련 지식을 검색하고 알게 되어 좋았다.&lt;/li&gt;
  &lt;li&gt;내가 정한 계획을 지키지 못했지만, 게을러서 지키지 못했다기보다 다른 공부거리가 생겨 이를 하다 보니 시간이 늦어버렸다.
    &lt;ul&gt;
      &lt;li&gt;오늘 호눅스가 얘기한 말을 기억하며,
        &lt;ol&gt;
          &lt;li&gt;전에 세웠던 계획을 다 소화 못하면 그것을 뒤로 미루지 말고 계획을 줄여서 새로 세우자!&lt;/li&gt;
          &lt;li&gt;내가 지치면 암것도 못한다. 길게 보고 최선을 다하자&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;할-일&quot;&gt;할 일&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;프로그래머스 2문제 풀기&lt;/li&gt;
  &lt;li&gt;Java의 정석 읽기&lt;/li&gt;
  &lt;li&gt;TCP/IP쉽게 더쉽게 읽기&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Blog" /><category term="jekyll" /><category term="Github" /><category term="Git" /></entry><entry><title type="html">SSH root 권한으로 접속 허용하기</title><link href="http://localhost:4000/linux/2021/01/07/permitSSH_Root.html" rel="alternate" type="text/html" title="SSH root 권한으로 접속 허용하기" /><published>2021-01-07T00:00:00+09:00</published><updated>2021-01-07T00:00:00+09:00</updated><id>http://localhost:4000/linux/2021/01/07/permitSSH_Root</id><content type="html" xml:base="http://localhost:4000/linux/2021/01/07/permitSSH_Root.html">&lt;h2 id=&quot;ssh-root-권한으로-접속-허용하기&quot;&gt;SSH root 권한으로 접속 허용하기&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;SCP 명령어로 remote의 특정 폴더에 접근하려면 root권한이 필요할 때가 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;분명히 root 비밀번호가 맞았는데도 자꾸 Permission denied, please try again. 가 뜬다면 ssh 설정을 확인해야한다.&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;remote(ubuntu 기준) 로 들어가서 /etc/ssh/sshd_config 파일을 연다&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;파일 내의 PermitRootLogin 을 yes로 바꿔준다. (없으면 추가한다.)&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PermitRootLogin &lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;데몬 명령어로 ssh를 재시작시켜 변경된 설정을 적용한다.&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl restart ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Linux" /><category term="SSH" /></entry><entry><title type="html">su: Authentication failure 발생하는 이유</title><link href="http://localhost:4000/linux/2021/01/07/rootPwdSet.html" rel="alternate" type="text/html" title="su: Authentication failure 발생하는 이유" /><published>2021-01-07T00:00:00+09:00</published><updated>2021-01-07T00:00:00+09:00</updated><id>http://localhost:4000/linux/2021/01/07/rootPwdSet</id><content type="html" xml:base="http://localhost:4000/linux/2021/01/07/rootPwdSet.html">&lt;h1 id=&quot;root-비번-설정&quot;&gt;Root 비번 설정&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;ubuntu를 깔고 사용자 등록 후 su 명령어를 통해 root로 전환하려는데 에러가 났다.&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;su : Authentication failure
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;나의 경우 root 비밀번호 설정을 하지 않아서 나는 에러였다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;root 비밀번호를 설정한다.&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;passwd root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Linux" /></entry><entry><title type="html">NAT이란? Static NAT, Dynamic NAT, PAT 비교</title><link href="http://localhost:4000/network/2021/01/07/NAT.html" rel="alternate" type="text/html" title="NAT이란? Static NAT, Dynamic NAT, PAT 비교" /><published>2021-01-07T00:00:00+09:00</published><updated>2021-01-07T00:00:00+09:00</updated><id>http://localhost:4000/network/2021/01/07/NAT</id><content type="html" xml:base="http://localhost:4000/network/2021/01/07/NAT.html">&lt;h1 id=&quot;nat&quot;&gt;NAT&lt;/h1&gt;

&lt;p&gt;NAT은 Network Address Translation의 약자로, 네트워크 주소를 변환해주는 방식이라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;Network Address는 우리가 흔히 아는 IP주소라고 생각하면 되는데, 이러한 변환 방식이 생겨난 이유는 다음과 같다.&lt;/p&gt;

&lt;p&gt;IPv4방식으로 표현할 수 있는 주소 개수에는 한계가 있는데, 때문에 현대의 수많은 장비(PC, 스마트폰 등)들을 수용할 수없다.&lt;/p&gt;

&lt;p&gt;그렇다고 IPv6로 한번에 바꾸기에는 이미 IPv4를 사용하고 있는 수많은 서비스들에 장애가 발생할 수 있다.&lt;/p&gt;

&lt;p&gt;따라서 여러 대의 기기들을 하나의 로컬 망으로 묶고 로컬 망 내의 사설 IP를 공인 IP로 맵핑시켜주는 방식을 통해,&lt;/p&gt;

&lt;p&gt;적은 공인 IP를 더 많은 장비들이 사용할 수 있게 해준다.&lt;/p&gt;

&lt;p&gt;여기서, 사설 IP와 공인 IP를 맵핑해주는 방식을 NAT이라고 한다.&lt;/p&gt;

&lt;h2 id=&quot;static-nat&quot;&gt;Static NAT&lt;/h2&gt;

&lt;p&gt;공인IP와 사설IP를 1:1로 맵핑시켜준다.&lt;/p&gt;

&lt;p&gt;예를 들어, 192.168.0.20 이라는 사설 IP와 121.156.242.211이라는 공인 IP가 한번 맵핑 되면 192.168.0.20은 항상 121.156.242.211와 묶여있게 된다.&lt;/p&gt;

&lt;p&gt;공인 IP주소와 실제로 사용하는 장비의 개수가 1:1이기 때문에, 공인 IP주소를 아낄수는 없다.&lt;/p&gt;

&lt;h2 id=&quot;dynamic-nat&quot;&gt;Dynamic NAT&lt;/h2&gt;

&lt;p&gt;공인IP와 사설IP를 1:1 맵핑 시켜주지만, 동적으로 맵핑되기 때문에 개념적으로 PC의 공인 IP는 고정되어 있지 않다.&lt;/p&gt;

&lt;p&gt;PC가 사용중이면 그 PC의 사설IP와 공인IP가 맵핑되어 있지만, PC가 사용중이지 않는다면 맵핑되어 있는 공인 IP가 반환되고,&lt;/p&gt;

&lt;p&gt;맵핑이 필요한 다른 PC가 해당 공인IP를 사용할 수 있게 된다.&lt;/p&gt;

&lt;p&gt;이런 식으로 동적 할당해줌으로써 더 적은 공인IP로 여러 PC가 인터넷에 연결할 수 있게 된다.&lt;/p&gt;

&lt;h2 id=&quot;patport-address-translation&quot;&gt;PAT(Port Address Translation)&lt;/h2&gt;

&lt;p&gt;공인IP 1개와 사설 IP여러개를 맵핑하여 사용할 수 있게 해주는데, 공인IP의 포트번호 별로 사설IP의 특정 포트에 맵핑해주는 방식이다.&lt;/p&gt;

&lt;p&gt;공유기에서 흔히 말하는 포트 포워딩이 이러한 방식이라고 볼 수 있다.&lt;/p&gt;

&lt;p&gt;예를 들어, 사설 IP가 192.168.0.1~10 이고 공인 IP가 121.156.242.211이라고 하자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;121.156.242.211:11 &amp;lt;=&amp;gt; 192.168.0.1:22&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;121.156.242.211:231 &amp;lt;=&amp;gt; 192.168.0.5:22&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;121.156.242.211:4000 &amp;lt;=&amp;gt; 192.168.0.3:900&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;121.156.242.211:3219 &amp;lt;=&amp;gt; 192.168.0.8:11&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;121.156.242.211:24442 &amp;lt;=&amp;gt; 192.168.0.10:22&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이런 식으로 맵핑하여 하나의 공인 IP로 여러 대의 PC를 사용할 수 있게 된다.&lt;/p&gt;</content><author><name></name></author><category term="Network" /><category term="NAT" /></entry><entry><title type="html">21년 1월 6일</title><link href="http://localhost:4000/til/2021/01/06/TIL3.html" rel="alternate" type="text/html" title="21년 1월 6일" /><published>2021-01-06T00:00:00+09:00</published><updated>2021-01-06T00:00:00+09:00</updated><id>http://localhost:4000/til/2021/01/06/TIL3</id><content type="html" xml:base="http://localhost:4000/til/2021/01/06/TIL3.html">&lt;h2 id=&quot;한-일&quot;&gt;한 일&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;백준 1009, 1076, 1052, 1757번 문제를 풀었다.&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/1009&quot;&gt;1009번&lt;/a&gt;&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;(A * A) % N = ((A%N) * A) % N 이라는 간단한 공식을 이용해 풀 수 있는 문제였다.&lt;/li&gt;
          &lt;li&gt;다만, 더 속도를 빠르게 하려면, A % N = R 일 때, A^b % N = R^b % N 이라는 사실을 이용해야 한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/1076&quot;&gt;1076번&lt;/a&gt;&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;간단한 HashMap을 이용하는 문제였다.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOrDefault&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entrySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/1052&quot;&gt;1052번&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;2진법 변환하는 과정과 매우 흡사한 과정을 통해 최소로 압축된 물병 갯수를 구할 수 있다.&lt;/li&gt;
          &lt;li&gt;복잡하게 생각하지 말고, 주어진 조건을 만족할 때까지, 구입할 물병 갯수를 1개씩 늘려가며 확인한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/10757&quot;&gt;10757번&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;A+B를 더하는 문제이지만, 0 &amp;lt; A,B &amp;lt; 10^10000 이라는 무지막지한 크기를 가진다.&lt;/li&gt;
          &lt;li&gt;BigInteger를 사용해도 되지만 공부를 하기위해서 사용하지 않았다.&lt;/li&gt;
          &lt;li&gt;이전에 배운 전가산기 개념을 이용해 10진수 sum, carry를 구하는 함수를 구현한다.&lt;/li&gt;
          &lt;li&gt;A와 B를 Int를 저장하는 배열이라고 생각하고 fulladder(전가산기)를 이용해 계산하면 된다. (나는 String으로 받아서 처리했다.)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;프로그래머스 [완주하지 못한 선수], [전화번호 목록], [위장], [베스트앨범], [주식가격], [기능개발] 풀었다.&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;풀었던 문제들이지만 Java로 처음 풀어서 Java에 대한 공부가 되었다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Comparator와 Comparable을 사용하여 Custom Sort를 할 수 있다.&lt;/p&gt;

        &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone_book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;123&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1215&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;321&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;21&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6662&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phone_book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
       
&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phone_book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reverseOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phone_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reverseOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Custom&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comparable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Custom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Custom&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//내가 other보다 우선순위가 높으면 음수, 같으면 0, 낮으면 양수 반환&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Java에서 제공하는 Queue와 Stack 사용법을 익혔다.&lt;/p&gt;

        &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;que&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// enqueue&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;que&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//offer로 대체 가능, offer는 실패 시 false 반환, add는 exception&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// queue의 앞쪽 값&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;que&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//peek로 대체 가능, peek는 실패 시 false 반환, element는 exception&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// dequeue&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;que&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//poll로 대체 가능, poll은 실패 시 false 반환, remove는 exception&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;que&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;que&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;TCP/IP 쉽게, 더 쉽게
    &lt;ul&gt;
      &lt;li&gt;12페이지까지 읽었다.&lt;/li&gt;
      &lt;li&gt;컴퓨터 네트워크의 종류, 네트워크 교환 방식(회선 교환 방식, 패킷 교환 방식), 서버와 클라이언트의 차이 등을 읽었다.&lt;/li&gt;
      &lt;li&gt;생각보다 입문자를 위한 내용 같아서 당황했지만, 알던 내용을 간략하게 훑고 가는 느낌이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;git에 있던 java application 프로젝트를 클론 후 intellij로 열면 빌드와 런이 안되는 문제가 발생했고 해결했다.
    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;클론한 프로젝트를 open한다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;소스코드가 들어있는 폴더를 우클릭한 후 Mark Directory as -&amp;gt; Sources Root를 클릭한다.&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/public/img/sourcesRoot.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
        &lt;h2 id=&quot;잘못한-것&quot;&gt;잘못한 것&lt;/h2&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;1052번 물병 문제에서, 너무 복잡하게 문제를 풀려다 시간만 날렸다.
    &lt;ul&gt;
      &lt;li&gt;Bruth force 방식이 무식하다고 생각하여, Log로 나눈 후 1개로 줄일 수 있는 물병을 빼고, 이 과정을 반복하여 풀려고 했다.&lt;/li&gt;
      &lt;li&gt;제한 조건으로 시간복잡도를 계산해서 bruth force로 풀어도 되는지 확인하지 않았다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;잘한-것&quot;&gt;잘한 것&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;힘들다고 내려놓지 않고, TCP/IP 쉽게, 더 쉽게 책을 읽었다.&lt;/li&gt;
  &lt;li&gt;엊그제와 어제 밀린 프로그래머스 문제를 포함하여 6문제를 풀었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;느낌&quot;&gt;느낌&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;뭔가 엄청난걸 하지 않아도, 목표한 바를 꾸준히 이뤄내는게 중요한 것 같다.&lt;/li&gt;
  &lt;li&gt;그림으로 배우는 TCP/IP책이 내용이 간단했지만, 피곤하다고 책을 펴지도 않은채 미루는 것과, 책을 펴서 10페이지라도 읽는 것은 성취감이 다르다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;할-일&quot;&gt;할 일&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;프로그래머스 2문제 풀기&lt;/li&gt;
  &lt;li&gt;TCP/IP 10쪽 읽기&lt;/li&gt;
  &lt;li&gt;Java의 정석 완독하기 (구체적 계획을 세우자)&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Blog" /><category term="jekyll" /><category term="Github" /><category term="Git" /><summary type="html">IntelliJ,</summary></entry><entry><title type="html">21년 1월 5일</title><link href="http://localhost:4000/til/2021/01/05/TIL2.html" rel="alternate" type="text/html" title="21년 1월 5일" /><published>2021-01-05T00:00:00+09:00</published><updated>2021-01-05T00:00:00+09:00</updated><id>http://localhost:4000/til/2021/01/05/TIL2</id><content type="html" xml:base="http://localhost:4000/til/2021/01/05/TIL2.html">&lt;h2 id=&quot;한-일&quot;&gt;한 일&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;byteadder의 input으로 두 배열이 들어오는데, 두 배열의 크기가 다르게 들어올 경우 작은 배열을 큰 배열의 크기에 맞춰 늘려준 후 (새로 생긴 공간은 false로 채움) 두 배열을 더할 수 있게 수정하였다.&lt;/li&gt;
  &lt;li&gt;Relay -&amp;gt; 논리회로(AND, OR, NOT) -&amp;gt; 진공관 -&amp;gt; 트랜지스터 -&amp;gt; ALU -&amp;gt; CPU(ALU+Register+cache) -&amp;gt; AP(CPU+GPU)로 이루어지는 컴퓨터 구조에 대해 맛보기 개념 학습&lt;/li&gt;
  &lt;li&gt;Program을 메모리에 올리면 Process가 된다.
    &lt;ol&gt;
      &lt;li&gt;Code영역(Text)
        &lt;ul&gt;
          &lt;li&gt;실행할 코드가 저장되는 영역&lt;/li&gt;
          &lt;li&gt;컴파일시에 크기 결정됨&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Data영역
        &lt;ul&gt;
          &lt;li&gt;전역(global) 변수, 정적(static) 변수, 정적 배열 등 컴파일시 크기가 결정되는 것들이 저장됨&lt;/li&gt;
          &lt;li&gt;컴파일시에 크기 결정됨&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Heap영역에 동적할당해주는 변수들 (객체 등)
        &lt;ul&gt;
          &lt;li&gt;동적 할당되는 객체가 저장되는 영역&lt;/li&gt;
          &lt;li&gt;런타임시에 크기 결정됨&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Stack영역에 지역변수 등
        &lt;ul&gt;
          &lt;li&gt;지역변수, 매개변수, 리턴 값과 같이 임시로 사용되는 값들이 저장되는 영역&lt;/li&gt;
          &lt;li&gt;함수 호출이나 반복문 등의 스코프를 벗어나면 내부 변수는 사라짐&lt;/li&gt;
          &lt;li&gt;런타임시에 크기 결정됨&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Github에서 21년 8월부터 Password 인증을 통한 Git operation인증이 안된다고 해서 two factor authenticator설정 하였다.
    &lt;ul&gt;
      &lt;li&gt;Two Factor authenticator 설정: https://jojoldu.tistory.com/449&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;로컬 git에 설정되어 있던 git 계정을 삭제 후 재등록 했고, Two Factor Authenticator 설정 후엔 password로 인증할 수 없기 때문에 개인 token을 발급하여 그 token을 password로 등록하였다.
    &lt;ul&gt;
      &lt;li&gt;기존 git credential(인증서)를 삭제한 후 재 로그인할 때, password로 발급한 token을 입력한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;git credential 삭제하기
    &lt;ol&gt;
      &lt;li&gt;global에서 인증서 삭제
        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--unset&lt;/span&gt; credential.helper
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;삭제 안되면, 시스템에서 인증서 삭제
        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  git config &lt;span class=&quot;nt&quot;&gt;--system&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--unset&lt;/span&gt; credential.helper
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;키체인 접근 프로그램 들어간 후, github 관련 암호 모두 삭제&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;jekyll로 테마적용하고 github.io 홈페이지 만들기
    &lt;ol&gt;
      &lt;li&gt;원하는 jekyll 테마를 다운로드 or fork한 후 [git id].github.io 로 원격 repository를 만든다.&lt;/li&gt;
      &lt;li&gt;_config.yml 파일을 자신에게 맞게 수정한 후 push한다.&lt;/li&gt;
      &lt;li&gt;(!중요)jekyll을 통해 _site 폴더를 빌드 한 후 모든 폴더를 source 브랜치로 푸시한다.
        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;왜냐하면 github에서 자체적으로 빌드해주는 테마가 있는데, 그 외의 테마는 master로 빌드해도 빌드해주지 않는다.&lt;br /&gt;
 따라서 로컬에서 빌드한 후, 빌드한 전체 웹사이트를 source 브랜치로 커밋한다. (자체 빌드해도 source 브랜치에 생성하는듯)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;향후 posting할 문서는 _post폴더에 md파일 작성 후, jekyll 실행하여 빌드 후에 전체 푸시&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;잘못한-것&quot;&gt;잘못한 것&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;하루종일 github.io 구축한다고 공부를 하지 못했다.&lt;/li&gt;
  &lt;li&gt;오늘도 알고리즘 문제를 한문제도 하지 못했다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;잘한-것&quot;&gt;잘한 것&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;음,, 딱히 잘한 건 떠오르지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;느낌&quot;&gt;느낌&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;시간관리를 잘 못한다는 걸 절실히 느꼈다. 뭔가 해보고 목표한 시간을 초과하면 보류한 후 다음 할 일을 하자.&lt;/li&gt;
  &lt;li&gt;끝내지 못한 일에 얽매여서 다른 스케줄에 영향을 끼치지 말자&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;할-일&quot;&gt;할 일&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;programmers 알고리즘 문제 풀기&lt;/li&gt;
  &lt;li&gt;TCP/IP 쉽게, 더 쉽게 책 20일 완독 목표 (1월 6일부터 시작)&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Blog" /><category term="jekyll" /><category term="Github" /><category term="Git" /><summary type="html">byteadder, Program영역, git 설정, JVM</summary></entry><entry><title type="html">21년 1월 4일</title><link href="http://localhost:4000/til/2021/01/04/TIL1.html" rel="alternate" type="text/html" title="21년 1월 4일" /><published>2021-01-04T00:00:00+09:00</published><updated>2021-01-04T00:00:00+09:00</updated><id>http://localhost:4000/til/2021/01/04/TIL1</id><content type="html" xml:base="http://localhost:4000/til/2021/01/04/TIL1.html">&lt;h1 id=&quot;한-일&quot;&gt;한 일&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;논리 회로의 반가산기와 전가산기 개념 이해&lt;/li&gt;
  &lt;li&gt;반가산기를 직접 구현해보기 (입력: &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean bit1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean bit2&lt;/code&gt;, 출력: &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean sum&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean carry&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;전가산기 구현해보기 (입력: &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean1 bit1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean bit2&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean carry&lt;/code&gt;, 출력: &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean sum&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean carry&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;전가산기를 이용하여 byte 덧셈 구현&lt;/li&gt;
  &lt;li&gt;10진법 → 2진법, 2진법 → 10진법 변환 구현해보기&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;잘못한-것&quot;&gt;잘못한 것&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;sum, carry 등의 작은 연산을 메소드로 만들지 않아 가독성이 떨어졌다&lt;/li&gt;
  &lt;li&gt;반가산기, 전가산기의 출력을 Sum, Carry를 포함하는 boolean 배열로 반환하였는데, 0은 Sum, 1은 Carry로 정하였지만,  코드상에서 final int로 각 인덱스를 명시해주지 않아 가독성이 떨어졌다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;잘한-것&quot;&gt;잘한 것&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;무작정 코딩을 하지 않고, 전가산기와 반가산기의 개념을 익힌 후(배경지식, 구글링) 구현하여 시행착오를 줄일 수 있었다.&lt;/li&gt;
  &lt;li&gt;Intellij를 통해 JUnit으로 Test 코드를 작성하여 구현이 제대로 됐는지 확인하였다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;느낌&quot;&gt;느낌&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;강의식 교육에만 익숙했던지라 굉장히 낯설다.&lt;/li&gt;
  &lt;li&gt;다른 사람들의 Git history를 보고 벌써부터 조급해지려고 한다.&lt;/li&gt;
  &lt;li&gt;조급해지면 안된다. 나는 나의 진도에 맞게 꾸준히 하면 된다. &lt;em&gt;길게 보고 준비하자.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;할것&quot;&gt;할것&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;github.io를 꾸며서 제대로 블로깅할지, 지금처럼 TIL에 md파일 업로드할지 정하기&lt;/li&gt;
  &lt;li&gt;최소 하루에 2문제씩 프로그래머스 문제 풀기&lt;/li&gt;
  &lt;li&gt;JAVA 기본문법부터 확실히 (JAVA의 정석 책 도착하면 공부시작)&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Blog" /><category term="jekyll" /><category term="Github" /><category term="Git" /><summary type="html">byteadder, fulladder</summary></entry></feed>