<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-01-05T23:07:57+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Dev.Isaac</title><subtitle>정이삭 공부블로그</subtitle><entry><title type="html">21년 1월 5일</title><link href="http://localhost:4000/til/2021/01/05/TIL2.html" rel="alternate" type="text/html" title="21년 1월 5일" /><published>2021-01-05T00:00:00+09:00</published><updated>2021-01-05T00:00:00+09:00</updated><id>http://localhost:4000/til/2021/01/05/TIL2</id><content type="html" xml:base="http://localhost:4000/til/2021/01/05/TIL2.html">&lt;h2 id=&quot;한-일&quot;&gt;한 일&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;byteadder의 input으로 두 배열이 들어오는데, 두 배열의 크기가 다르게 들어올 경우 작은 배열을 큰 배열의 크기에 맞춰 늘려준 후 (새로 생긴 공간은 false로 채움) 두 배열을 더할 수 있게 수정하였다.&lt;/li&gt;
  &lt;li&gt;Relay -&amp;gt; 논리회로(AND, OR, NOT) -&amp;gt; 진공관 -&amp;gt; 트랜지스터 -&amp;gt; ALU -&amp;gt; CPU(ALU+Register+cache) -&amp;gt; AP(CPU+GPU)로 이루어지는 컴퓨터 구조에 대해 맛보기 개념 학습&lt;/li&gt;
  &lt;li&gt;Program을 메모리에 올리면 Process가 된다.
    &lt;ol&gt;
      &lt;li&gt;Code영역(Text)
        &lt;ul&gt;
          &lt;li&gt;실행할 코드가 저장되는 영역&lt;/li&gt;
          &lt;li&gt;컴파일시에 크기 결정됨&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Data영역
        &lt;ul&gt;
          &lt;li&gt;전역(global) 변수, 정적(static) 변수, 정적 배열 등 컴파일시 크기가 결정되는 것들이 저장됨&lt;/li&gt;
          &lt;li&gt;컴파일시에 크기 결정됨&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Heap영역에 동적할당해주는 변수들 (객체 등)
        &lt;ul&gt;
          &lt;li&gt;동적 할당되는 객체가 저장되는 영역&lt;/li&gt;
          &lt;li&gt;런타임시에 크기 결정됨&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Stack영역에 지역변수 등
        &lt;ul&gt;
          &lt;li&gt;지역변수, 매개변수, 리턴 값과 같이 임시로 사용되는 값들이 저장되는 영역&lt;/li&gt;
          &lt;li&gt;함수 호출이나 반복문 등의 스코프를 벗어나면 내부 변수는 사라짐&lt;/li&gt;
          &lt;li&gt;런타임시에 크기 결정됨&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Github에서 21년 8월부터 Password 인증을 통한 Git operation인증이 안된다고 해서 two factor authenticator설정 하였다.
    &lt;ul&gt;
      &lt;li&gt;Two Factor authenticator 설정: https://jojoldu.tistory.com/449&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;로컬 git에 설정되어 있던 git 계정을 삭제 후 재등록 했고, Two Factor Authenticator 설정 후엔 password로 인증할 수 없기 때문에 개인 token을 발급하여 그 token을 password로 등록하였다.
    &lt;ul&gt;
      &lt;li&gt;기존 git credential(인증서)를 삭제한 후 재 로그인할 때, password로 발급한 token을 입력한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;git credential 삭제하기
    &lt;ol&gt;
      &lt;li&gt;global에서 인증서 삭제
        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--unset&lt;/span&gt; credential.helper
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;삭제 안되면, 시스템에서 인증서 삭제
        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  git config &lt;span class=&quot;nt&quot;&gt;--system&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--unset&lt;/span&gt; credential.helper
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;키체인 접근 프로그램 들어간 후, github 관련 암호 모두 삭제&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;jekyll로 테마적용하고 github.io 홈페이지 만들기
    &lt;ol&gt;
      &lt;li&gt;원하는 jekyll 테마를 다운로드 or fork한 후 [git id].github.io 로 원격 repository를 만든다.&lt;/li&gt;
      &lt;li&gt;_config.yml 파일을 자신에게 맞게 수정한 후 push한다.&lt;/li&gt;
      &lt;li&gt;(!중요)jekyll을 통해 _site 폴더를 빌드 한 후 모든 폴더를 source 브랜치로 푸시한다.
        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;왜냐하면 github에서 자체적으로 빌드해주는 테마가 있는데, 그 외의 테마는 master로 빌드해도 빌드해주지 않는다.&lt;br /&gt;
 따라서 로컬에서 빌드한 후, 빌드한 전체 웹사이트를 source 브랜치로 커밋한다. (자체 빌드해도 source 브랜치에 생성하는듯)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;향후 posting할 문서는 _post폴더에 md파일 작성 후, jekyll 실행하여 빌드 후에 전체 푸시&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;잘못한-것&quot;&gt;잘못한 것&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;하루종일 github.io 구축한다고 공부를 하지 못했다.&lt;/li&gt;
  &lt;li&gt;오늘도 알고리즘 문제를 한문제도 하지 못했다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;잘한-것&quot;&gt;잘한 것&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;음,, 딱히 잘한 건 떠오르지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;느낌&quot;&gt;느낌&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;시간관리를 잘 못한다는 걸 절실히 느꼈다. 뭔가 해보고 목표한 시간을 초과하면 포기한 후 다음 할일을 꼭 하자.&lt;/li&gt;
  &lt;li&gt;끝내지 못한 일에 얽매여서 다른 스케줄에 영향을 끼치지 말자&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;할-일&quot;&gt;할 일&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;programmers 알고리즘 문제 풀기&lt;/li&gt;
  &lt;li&gt;TCP/IP 쉽게, 더 쉽게 책 20일 완독 목표 (1월 6일부터 시작)&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Blog" /><category term="jekyll" /><category term="Github" /><category term="Git" /><summary type="html">byteadder, Program영역, git 설정, JVM</summary></entry><entry><title type="html">21년 1월 4일</title><link href="http://localhost:4000/til/2021/01/04/TIL1.html" rel="alternate" type="text/html" title="21년 1월 4일" /><published>2021-01-04T00:00:00+09:00</published><updated>2021-01-04T00:00:00+09:00</updated><id>http://localhost:4000/til/2021/01/04/TIL1</id><content type="html" xml:base="http://localhost:4000/til/2021/01/04/TIL1.html">&lt;h1 id=&quot;한-일&quot;&gt;한 일&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;논리 회로의 반가산기와 전가산기 개념 이해&lt;/li&gt;
  &lt;li&gt;반가산기를 직접 구현해보기 (입력: &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean bit1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean bit2&lt;/code&gt;, 출력: &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean sum&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean carry&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;전가산기 구현해보기 (입력: &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean1 bit1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean bit2&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean carry&lt;/code&gt;, 출력: &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean sum&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean carry&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;전가산기를 이용하여 byte 덧셈 구현&lt;/li&gt;
  &lt;li&gt;10진법 → 2진법, 2진법 → 10진법 변환 구현해보기&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;잘못한-것&quot;&gt;잘못한 것&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;sum, carry 등의 작은 연산을 메소드로 만들지 않아 가독성이 떨어졌다&lt;/li&gt;
  &lt;li&gt;반가산기, 전가산기의 출력을 Sum, Carry를 포함하는 boolean 배열로 반환하였는데, 0은 Sum, 1은 Carry로 정하였지만,  코드상에서 final int로 각 인덱스를 명시해주지 않아 가독성이 떨어졌다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;잘한-것&quot;&gt;잘한 것&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;무작정 코딩을 하지 않고, 전가산기와 반가산기의 개념을 익힌 후(배경지식, 구글링) 구현하여 시행착오를 줄일 수 있었다.&lt;/li&gt;
  &lt;li&gt;Intellij를 통해 JUnit으로 Test 코드를 작성하여 구현이 제대로 됐는지 확인하였다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;느낌&quot;&gt;느낌&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;강의식 교육에만 익숙했던지라 굉장히 낯설다.&lt;/li&gt;
  &lt;li&gt;다른 사람들의 Git history를 보고 벌써부터 조급해지려고 한다.&lt;/li&gt;
  &lt;li&gt;조급해지면 안된다. 나는 나의 진도에 맞게 꾸준히 하면 된다. &lt;em&gt;길게 보고 준비하자.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;할것&quot;&gt;할것&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;github.io를 꾸며서 제대로 블로깅할지, 지금처럼 TIL에 md파일 업로드할지 정하기&lt;/li&gt;
  &lt;li&gt;최소 하루에 2문제씩 프로그래머스 문제 풀기&lt;/li&gt;
  &lt;li&gt;JAVA 기본문법부터 확실히 (JAVA의 정석 책 도착하면 공부시작)&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Blog" /><category term="jekyll" /><category term="Github" /><category term="Git" /><summary type="html">byteadder, fulladder</summary></entry></feed>